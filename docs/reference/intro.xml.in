<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
 <!ENTITY % local.common.attrib "xmlns:xi CDATA #FIXED 'http://www.w3.org/2003/XInclude'">
 <!ENTITY % gtkdocentities SYSTEM "xml/gtkdocentities.ent">
 %gtkdocentities;
]>

<part>
  <title>Introduction</title>

  <para>
    Tepl is a library that eases the development of
    <ulink url="https://wiki.gnome.org/Projects/GtkSourceView">GtkSourceView</ulink>-based
    text editors and IDEs. Tepl is the acronym for “Text editor product line”.
  </para>

  <para>
    See the <ulink url="https://wiki.gnome.org/Projects/Tepl">Tepl web page</ulink>.
  </para>

  <para>
    Tepl was previously named Gtef (GTK+ text editor framework). The project has
    been renamed in June 2017 to have a more beautiful name. The end of Tepl is
    pronounced like “apple”.
  </para>

  <para>
    The Tepl library follows a product line approach (see the book
    <ulink url="https://www.amazon.com/Feature-Oriented-Software-Product-Lines-Implementation/dp/3642375200/">Feature-Oriented
    Software Product Lines: Concepts and Implementation</ulink>).
    Instead of creating one general-purpose text editor or IDE with a plugin
    system, the idea is to create several <emphasis>specialized</emphasis> text
    editors. For example specialized for one programming language, or one
    development platform, or a small group of related languages. By being
    specialized, an application is potentially better at what it does. It
    follows more closely the UNIX philosophy to do only one thing but doing it
    well. And it better follows the GNOME philosophy: writing applications that
    Just Works; when a user opens the text editor for the first time, it should
    work out-of-the-box, without the need to find, install and configure
    plugins. Of course it still makes sense to develop one general-purpose text
    editor for the languages not yet covered by specialized text editors.
  </para>

  <para>
    The library contains a framework part (for now without a plugin system), and
    other features are available more as a toolkit. Note that the library is far
    from finished, it is under development.
  </para>

  <para>
    Maybe some of the Tepl features will be moved to GtkSourceView when it's
    considered more stable. So Tepl can also be seen as an incubator for some
    GtkSourceView features.
  </para>

  <refsect1>
    <title>Iterative API design and stability guarantees</title>

    <para>
      Tepl uses the same
      <ulink url="https://developer.gnome.org/programming-guidelines/stable/versioning.html.en">versioning scheme</ulink>
      as GNOME. API/ABI stability is guaranteed. For example Tepl 3.2 is
      backward-compatible with Tepl 3.0 (those versions don't necessarily exist,
      it's just an example). But the peculiarity of Tepl is that new major
      versions are released more often, at most every 6 months if needed.
      Different major versions can be installed in parallel, like GTK+&nbsp;2
      and GTK+&nbsp;3.
    </para>

    <para>
      New major versions are released more often because Tepl contains more
      experimental APIs than GtkSourceView, sometimes even unfinished features.
      API design is hard, it needs an iterative process. Instead of being stuck
      for years with a non-optimal API, the Tepl developers want to be able to
      break the API at any time, to iteratively improve it. Sometimes we see
      possible improvements several years later.
    </para>
  </refsect1>

  <refsect1>
    <title>GTK+ and GtkSourceView dependencies</title>
    <para>
      Tepl @TEPL_API_VERSION@ depends on GTK+ 3 and GtkSourceView 3.
    </para>
  </refsect1>

  <refsect1>
    <title>pkg-config name</title>
    <para>
      For Tepl @TEPL_API_VERSION@, the pkg-config name is:
      <code>tepl-@TEPL_API_VERSION@</code>
    </para>
    <para>
      To compile a program that uses Tepl @TEPL_API_VERSION@, you
      can for example use the following command:
    </para>
    <para>
      <code>$ gcc hello.c `pkg-config --cflags --libs tepl-@TEPL_API_VERSION@` -o hello</code>
    </para>
  </refsect1>
</part>
